@using Syncfusion.EJ2;
@section ControlsSection{
    <div class="control-section" style="margin-left:120px">
        @(Html.EJS().AccumulationChart("container")
    .Series(sr =>
    {
        sr.Type(Syncfusion.EJ2.Charts.AccumulationType.Pie)
               .XName("x")
               .YName("y")
               .DataLabel(dl => dl.Visible(true).Name("${point.y}").Position(Syncfusion.EJ2.Charts.AccumulationLabelPosition.Inside).Font(ft => ft.FontWeight("600").Color("white").Size("14px")))
               .StartAngle(0)
               .EndAngle(360)
               .InnerRadius("40%")
               .Name("Revenue")
               .DataSource(ViewBag.dataSource).Add();
    })
    .EnableSmartLabels(true)
    .SelectionMode(Syncfusion.EJ2.Charts.AccumulationSelectionMode.Point)
    .Tooltip(tp => tp.Enable(false).Format("${point.x} <br/>Composition: <b>${point.y}%</b>"))
    .LegendSettings(leg => leg.Visible(true)
                        .ToggleVisibility(false)
                        .Position(Syncfusion.EJ2.Charts.LegendPosition.Right)
                        .Height("28%")
                        .Width("44%"))
     .TextRender("textRender")
     .Load("load")
     .Loaded("loaded")
     .AnimationComplete("animationComplete")
     .Title("Education Institutional Revenue").Render()     
     )
    </div>
    <script>
       
        var centerTitle = document.createElement('div');
        centerTitle.innerHTML = 'Expenses in Year';
        centerTitle.style.position = 'absolute';
        centerTitle.style.visibility = 'hidden';
        
        var textRender = function (args) {
            var pie = document.getElementById('container').ej2_instances[0];
            args.series.dataLabel.font.size = getFontSize(pie.initialClipRect.width);
            args.text = args.text + '%';
        }
        var rect;
        var animationComplete = function (args) {
            centerTitle.style.fontSize = getFontSize(args.accumulation.initialClipRect.width);
            rect = centerTitle.getBoundingClientRect();
            centerTitle.style.top = (args.accumulation.origin.y - rect.height / 2) + 'px';
            centerTitle.style.left = (args.accumulation.origin.x - rect.width / 2) + 'px';
            centerTitle.style.visibility = 'visible';
            var points = args.accumulation.visibleSeries[0].points;
            for (var _i = 0, points_1 = points; _i < points_1.length; _i++) {
                var point = points_1[_i];
                if (point.labelPosition === 'Outside' && point.labelVisible) {
                    var label = document.getElementById('container_datalabel_Series_0_text_' + point.index);
                    label.setAttribute('fill', 'black');
                }
            }
        }
        

         @*custom code start*@
        var load = function(args) {
            var selectedTheme = themeName ? themeName : 'Material';
            args.accumulation.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, "Dark").replace(/contrast/i, 'Contrast');
            args.accumulation.legendSettings.position = 'Right';
            args.chart.width = ej.base.Browser.isDevice ? "100%" : "90%";
        }
        @*custom code end*@
        var count = 0;
        var loaded = function (args) {
            var pie = document.getElementById('container').ej2_instances[0];
            pie.loaded = null;
            var pieinterval = setInterval(
                () => {
                    if (document.getElementById('container')) {
                        if(count === 0) {
                            pie.series[0].dataSource = [{ 'x': 'Net-tution and Fees', y: 10 }, { 'x': 'Self-supporting Operations', y: 10 },
                            { 'x': 'Private Gifts', y: 13 }, { 'x': 'All Other', y: 14 },
                            { 'x': 'Local Revenue', y: 9 }, { 'x': 'State Revenue', y: 13 },
                            { 'x': 'Federal Revenue', y: 8 }
                            ];
                            pie.animate();
                            count++;
                        }
                        else if(count === 1) {
                            pie.series[0].dataSource = [
                                { 'x': 'Net-tution and Fees', y: 120 }, { 'x': 'Self-supporting Operations', y: 31 },
                                { 'x': 'Private Gifts', y: 6 }, { 'x': 'All Other', y: 12 },
                                { 'x': 'Local Revenue', y: 25 }, { 'x': 'State Revenue', y: 11 },
                                { 'x': 'Federal Revenue', y: 12 }
                            ];
                            pie.animate();
                            count++;
                        }
                        else if(count === 2) {
                            pie.series[0].dataSource = [
                                { 'x': 'Net-tution and Fees', y: 6 }, { 'x': 'Self-supporting Operations', y: 22 },
                                { 'x': 'Private Gifts', y: 11 }, { 'x': 'All Other', y: 15 },
                                { 'x': 'Local Revenue', y: 13 }, { 'x': 'State Revenue', y: 10 },
                                { 'x': 'Federal Revenue', y: 8 }
                            ];
                            pie.animate();
                            count++;
                        }
                        else if(count === 3) {
                            pie.series[0].dataSource = [
                                { 'x': 'Net-tution and Fees', y: 15 }, { 'x': 'Self-supporting Operations', y: 10 },
                                { 'x': 'Private Gifts', y: 18 }, { 'x': 'All Other', y: 20 },
                                { 'x': 'Local Revenue', y: 30 }, { 'x': 'State Revenue', y: 20 },
                                { 'x': 'Federal Revenue', y: 25 }
                            ];
                            pie.animate();
                            count++;
                        }
                        else if(count === 4) {
                            pie.series[0].dataSource = [
                                { 'x': 'Net-tution and Fees', y: 21 }, { 'x': 'Self-supporting Operations', y: 10 },
                                { 'x': 'Private Gifts', y: 15 }, { 'x': 'All Other', y: 15 },
                                { 'x': 'Local Revenue', y: 11 }, { 'x': 'State Revenue', y: 20 },
                                { 'x': 'Federal Revenue', y: 60 }
                            ];
                            pie.animate();
                            count = 0;
                        }
                    } else {
                        clearInterval(pieinterval);
                    }
                },
                3000);
            centerTitle.style.top = (args.accumulation.origin.y - rect.height / 2) + 'px';
            centerTitle.style.left = (args.accumulation.origin.x - rect.width / 2) + 'px';
        }
        document.getElementById('container').appendChild(centerTitle);
        
        function getFontSize(width) {
            if (width > 300) {
                return '13px';
            }
            else if (width > 250) {
                return '8px';
            }
            else {
                return '6px';
            }
        }

    </script>
}
 @*custom code start*@
@section Meta{
                    <meta name="description" content="This example demonstrates the Pie with Legend in ASP.NET MVC Chart control. Explore here for more details."/>
                }
 @*custom code end*@
@section ActionDescription{
    <p>
    This sample illustrates an educational instituteâ€™s revenue by using the pie with legend series. The legend will be displayed at right side of the chart.
</p>
}
@section Description{
    <p> In this example, you can see how to render doughnut chart. You can use <code>radius</code> and <code>innerRadius</code> properties to render the doughnut and also use <code>border</code>, <code>fill</code> properties to customize the point. <code>dataLabel</code> is used to represent individual data and its value.</p>
<p> <code>Tooltip</code> is enabled in this example, to see the tooltip in action, hover a point or tap on a point in touch enabled devices.</p>
}
@section Title{
                    <title>ASP.NET MVC Chart Pie with Legend Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Pie with Legend in ASP.NET MVC Chart Control</h1>
                }